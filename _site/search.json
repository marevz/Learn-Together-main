[
  {
    "objectID": "Fondamentaux.html",
    "href": "Fondamentaux.html",
    "title": "Les fondamentaux de Python",
    "section": "",
    "text": "Qu’est ce qu’une variable ? Une variable est un conteneur dans lequel tu peux stocker différents types de données : des nombres, des chaines de caractères, ou d’autres objets.\nPar exemple a = 15 est une variable nomée a avec pour valeur 15.\nNous pouvons contaster :\n\nL’affectation (=)\nPython est un langage à typage dynamique, c’est-à-dire que le type des variables est déterminé lors de l’exécution du programme.\nSensible à la casse, la variable “A” et “a” sont deux variables différentes.\nL’instruction Print permet d’imprimer plusieurs variables en même temps avec (,).\nPlusieurs valeurs à plusieurs variables ou plusieurs variables à plusieurs valeurs sur une seule ligne.\nLa dénomination des variables comportent :\n\nLa casse camel : testVariableBox\nLa casse Pascal : TestVariableBox\nLa casse serpent : test_variable_box\n\nEvite de:\n\nNommer des variables en commançant par des chiffres\nSe servir de symboles comme des espaces ou des tirets\nMixer des chaînes de caractères et des nombres entiers à l’intérieur de la concaténation\n\n\n\nAffectation simple\n\n\nma_variable = 15\nprint(ma_variable)\n\n15\n\n\n\nAffectation à multiples variables\n\n\na, b, c = \"Ananas\", \"Banane\", \"Coco\"\n\nprint(a)\nprint(b)\nprint(c)\n\nAnanas\nBanane\nCoco\n\n\n\nAffectation de la même valeur\n\n\na = b = c = \"Coco\"\nprint(a)\nprint(b)\nprint(c)\n\nCoco\nCoco\nCoco\n\n\n\n\nEn Python, les données courantes incluent : * les entiers (int) : des nombres sans décimale. + Exemple : 6, -4.\n\nNombres Complexes (complex) : des nombres comprenant une partie réelle et une partie imaginaire.\n\nExemple : 2 + 7j.\n\nFlottants (float) : des nombres avec au moins une décimale.\n\nExemple : 3.87, -0.005.\n\nChaîne de caractères (str) : une suite de caractères, délimitée par des guillemets simples ou doubles.\n\nExemple : \"Hello Mareva !\"\n\nBooléens (bool) : souvent le résultat d’expressions, de comparaison ou de conditions logiques.\n\nIls représentent uniquement deux valeurs : True (Vrai) et False (Faux).\n\n\nLa fonction type()\n\n# Pour connaître le type de ton objet\ntype(\"Bonjour\")\n\nstr\n\n\nExemple : Vérifions le type de chaque variable en impliquant une phrase réponse\n\n# Définition de différentes variables\nprenom = \"Mareva\"\nage = 21\ntaille = 1.63\netudiant = True\nen_alternance = False\n\n\n# Vérifications\nprint(\"La variable prenoms est de type : \", type(prenom))\n\nLa variable prenoms est de type :  &lt;class 'str'&gt;\n\n\n\nprint(\"La variable age est de type : \", type(age))\n\nLa variable age est de type :  &lt;class 'int'&gt;\n\n\n\nprint(\"La variable taille est de type : \", type(taille))\n\nLa variable taille est de type :  &lt;class 'float'&gt;\n\n\n\nprint(\"La variable etudiant est de type : \", type(etudiant))\n\nLa variable etudiant est de type :  &lt;class 'bool'&gt;\n\n\n\nprint(\"La variable en_alternance est de type : \", type(en_alternance))\n\nLa variable en_alternance est de type :  &lt;class 'bool'&gt;\n\n\n\n\n\nSouvent appelée “casting” en programmation, la conversion de type est une manière de convertir une valeur d’un type donné en un autre type.\nEn Python, il existe différentes fonctions intégrées pour réaliser ces conversions entre les types de base comme vue précédemment : les entiers (int), les chaînes de caractères(str), les booléens (bool), ainsi que les nombres à virgule flottante (float).\nVoici des exemples :\n\nConversion en Entier (int)\n\n\n# Depuis une chaîne de caractères : convertion de la chaîne \"987\" en entier 987\nchaine = \"987\"\ndepartement = int(chaine)  \n\n# Depuis un booléen : convertion de True en entier 0 \nvrai = False\nentier = int(False)  \n\n# Depuis un float : convertion d'un nombre décimal 10,02 en 10 entier (troncature, pas d'arrondi)\nflottante = 10.02\nentier = int(flottante)  \n\n\nConversion en chaine de caractère (str)\n\n\n# Depuis un entier ou un float : convertion de l'entier 987 en chaîne \"987\"\nentier = 987\nchaine = str(entier) \n\n# Depuis un booléen :\nvrai = True\nchaine = str(vrai)  # Convertion de True en \"True\"\n\n\nConversion en booléen (bool)\n\n\n# Depuis une chaîne de caractères : \n## Convertion d'une chaîne vide en False\nchaine1 = \"\"\nbooleen = bool(chaine1) \n## Convertion de \"Prog\" en True\nchaine2 = \"Prog\"\nbooleen1 = bool(chaine2)  \n\n# Depuis un nombre : \n## Convertit 0 en False\nnombre1 = 0\nbooleen1 = bool(nombre1) \n## Convertit 987 en True\nnombre2 = 987\nbooleen2 = bool(nombre2)  \n\n\nConversion en Float(float)\n\n\n## Depuis une chaîne de caractères** :\nchaine = \"987.87\"\nflottant = float(chaine)  # Convertit la chaîne \"987.87\" en float 987.87\n\n## Depuis un entier** :\nentier = 1000\nflottant = float(entier)  # Convertit l'entier 1000 en float 1000.0\n\n## Depuis un booléen** :\nvrai = True\nflottant = float(vrai)  # Convertit True en 1.0\n\n\n\n\nDémonstration des Additions (+), soustractions (-), **multiplications (*), et divisions (/)**.\n\nsomme = 14 + 4       \ndifference = 14 - 4  \nproduit = 14 * 4     \nquotient = 14 / 4\n\nprint(somme , difference , produit , quotient)\n\n18 10 56 3.5\n\n\nDémonstratin de : Modulo (%), qui retourne le reste de la division, et **Puissance (* *)** élève un nombre à une certaine puissance.\n\nreste = 5 % 3       \npuissance = 6 ** 3  \npuissance_bis = 4 ^ 3\n\nprint(reste, puissance, puissance_bis)\n\n2 216 7\n\n\n\n\n\n\nLa concaténation (+) fusionne des chaînes\nLa répétition **(*)** réeédite une chaîne le nombre de fois que tu indiquera\n\n\nmessage = \"Hello\" + \" my world !\" \necho_rire = \"Ja\" * 3    \n\nprint(message, echo_rire)\n\nHello my world ! JaJaJa\n\n\n\n\n\nLes opérateurs d’affectation composés sont des raccourcis qui jumèlent une opération arithmétique ou binaire avec une affectation.\nEn résumé, ils vous permettent de réaliser une opération sur une variable et de lui réassigner le résultat en une seule étape.\n\n# Initialisation de x\nx = 10\nprint(x)\n\n10\n\n\n\n# Ajouter et assigner\nx += 3  \nprint(x)\n\n13\n\n\n\n# Soustraire et assigner\nx -= 2  \nprint(x)\n\n11\n\n\n\n# Multiplier et assigner\nx *= 7  #\nprint(x)\n\n77\n\n\n\n# Diviser et assigner\nx /= 2  \nprint(x)\n\n38.5\n\n\n\n# Division entière et assigner\nx //= 3  \nprint(x)\n\n12.0\n\n\n\n# Modulo et assigner\nx %= 4  \nprint(x)\n\n0.0\n\n\n\n# Exponentielle et assigner\nx **= 6  \nprint(x)\n\n0.0"
  },
  {
    "objectID": "Fondamentaux.html#les-variables-types-natifs",
    "href": "Fondamentaux.html#les-variables-types-natifs",
    "title": "Les fondamentaux de Python",
    "section": "",
    "text": "Qu’est ce qu’une variable ? Une variable est un conteneur dans lequel tu peux stocker différents types de données : des nombres, des chaines de caractères, ou d’autres objets.\nPar exemple a = 15 est une variable nomée a avec pour valeur 15.\nNous pouvons contaster :\n\nL’affectation (=)\nPython est un langage à typage dynamique, c’est-à-dire que le type des variables est déterminé lors de l’exécution du programme.\nSensible à la casse, la variable “A” et “a” sont deux variables différentes.\nL’instruction Print permet d’imprimer plusieurs variables en même temps avec (,).\nPlusieurs valeurs à plusieurs variables ou plusieurs variables à plusieurs valeurs sur une seule ligne.\nLa dénomination des variables comportent :\n\nLa casse camel : testVariableBox\nLa casse Pascal : TestVariableBox\nLa casse serpent : test_variable_box\n\nEvite de:\n\nNommer des variables en commançant par des chiffres\nSe servir de symboles comme des espaces ou des tirets\nMixer des chaînes de caractères et des nombres entiers à l’intérieur de la concaténation\n\n\n\nAffectation simple\n\n\nma_variable = 15\nprint(ma_variable)\n\n15\n\n\n\nAffectation à multiples variables\n\n\na, b, c = \"Ananas\", \"Banane\", \"Coco\"\n\nprint(a)\nprint(b)\nprint(c)\n\nAnanas\nBanane\nCoco\n\n\n\nAffectation de la même valeur\n\n\na = b = c = \"Coco\"\nprint(a)\nprint(b)\nprint(c)\n\nCoco\nCoco\nCoco\n\n\n\n\nEn Python, les données courantes incluent : * les entiers (int) : des nombres sans décimale. + Exemple : 6, -4.\n\nNombres Complexes (complex) : des nombres comprenant une partie réelle et une partie imaginaire.\n\nExemple : 2 + 7j.\n\nFlottants (float) : des nombres avec au moins une décimale.\n\nExemple : 3.87, -0.005.\n\nChaîne de caractères (str) : une suite de caractères, délimitée par des guillemets simples ou doubles.\n\nExemple : \"Hello Mareva !\"\n\nBooléens (bool) : souvent le résultat d’expressions, de comparaison ou de conditions logiques.\n\nIls représentent uniquement deux valeurs : True (Vrai) et False (Faux).\n\n\nLa fonction type()\n\n# Pour connaître le type de ton objet\ntype(\"Bonjour\")\n\nstr\n\n\nExemple : Vérifions le type de chaque variable en impliquant une phrase réponse\n\n# Définition de différentes variables\nprenom = \"Mareva\"\nage = 21\ntaille = 1.63\netudiant = True\nen_alternance = False\n\n\n# Vérifications\nprint(\"La variable prenoms est de type : \", type(prenom))\n\nLa variable prenoms est de type :  &lt;class 'str'&gt;\n\n\n\nprint(\"La variable age est de type : \", type(age))\n\nLa variable age est de type :  &lt;class 'int'&gt;\n\n\n\nprint(\"La variable taille est de type : \", type(taille))\n\nLa variable taille est de type :  &lt;class 'float'&gt;\n\n\n\nprint(\"La variable etudiant est de type : \", type(etudiant))\n\nLa variable etudiant est de type :  &lt;class 'bool'&gt;\n\n\n\nprint(\"La variable en_alternance est de type : \", type(en_alternance))\n\nLa variable en_alternance est de type :  &lt;class 'bool'&gt;\n\n\n\n\n\nSouvent appelée “casting” en programmation, la conversion de type est une manière de convertir une valeur d’un type donné en un autre type.\nEn Python, il existe différentes fonctions intégrées pour réaliser ces conversions entre les types de base comme vue précédemment : les entiers (int), les chaînes de caractères(str), les booléens (bool), ainsi que les nombres à virgule flottante (float).\nVoici des exemples :\n\nConversion en Entier (int)\n\n\n# Depuis une chaîne de caractères : convertion de la chaîne \"987\" en entier 987\nchaine = \"987\"\ndepartement = int(chaine)  \n\n# Depuis un booléen : convertion de True en entier 0 \nvrai = False\nentier = int(False)  \n\n# Depuis un float : convertion d'un nombre décimal 10,02 en 10 entier (troncature, pas d'arrondi)\nflottante = 10.02\nentier = int(flottante)  \n\n\nConversion en chaine de caractère (str)\n\n\n# Depuis un entier ou un float : convertion de l'entier 987 en chaîne \"987\"\nentier = 987\nchaine = str(entier) \n\n# Depuis un booléen :\nvrai = True\nchaine = str(vrai)  # Convertion de True en \"True\"\n\n\nConversion en booléen (bool)\n\n\n# Depuis une chaîne de caractères : \n## Convertion d'une chaîne vide en False\nchaine1 = \"\"\nbooleen = bool(chaine1) \n## Convertion de \"Prog\" en True\nchaine2 = \"Prog\"\nbooleen1 = bool(chaine2)  \n\n# Depuis un nombre : \n## Convertit 0 en False\nnombre1 = 0\nbooleen1 = bool(nombre1) \n## Convertit 987 en True\nnombre2 = 987\nbooleen2 = bool(nombre2)  \n\n\nConversion en Float(float)\n\n\n## Depuis une chaîne de caractères** :\nchaine = \"987.87\"\nflottant = float(chaine)  # Convertit la chaîne \"987.87\" en float 987.87\n\n## Depuis un entier** :\nentier = 1000\nflottant = float(entier)  # Convertit l'entier 1000 en float 1000.0\n\n## Depuis un booléen** :\nvrai = True\nflottant = float(vrai)  # Convertit True en 1.0\n\n\n\n\nDémonstration des Additions (+), soustractions (-), **multiplications (*), et divisions (/)**.\n\nsomme = 14 + 4       \ndifference = 14 - 4  \nproduit = 14 * 4     \nquotient = 14 / 4\n\nprint(somme , difference , produit , quotient)\n\n18 10 56 3.5\n\n\nDémonstratin de : Modulo (%), qui retourne le reste de la division, et **Puissance (* *)** élève un nombre à une certaine puissance.\n\nreste = 5 % 3       \npuissance = 6 ** 3  \npuissance_bis = 4 ^ 3\n\nprint(reste, puissance, puissance_bis)\n\n2 216 7\n\n\n\n\n\n\nLa concaténation (+) fusionne des chaînes\nLa répétition **(*)** réeédite une chaîne le nombre de fois que tu indiquera\n\n\nmessage = \"Hello\" + \" my world !\" \necho_rire = \"Ja\" * 3    \n\nprint(message, echo_rire)\n\nHello my world ! JaJaJa\n\n\n\n\n\nLes opérateurs d’affectation composés sont des raccourcis qui jumèlent une opération arithmétique ou binaire avec une affectation.\nEn résumé, ils vous permettent de réaliser une opération sur une variable et de lui réassigner le résultat en une seule étape.\n\n# Initialisation de x\nx = 10\nprint(x)\n\n10\n\n\n\n# Ajouter et assigner\nx += 3  \nprint(x)\n\n13\n\n\n\n# Soustraire et assigner\nx -= 2  \nprint(x)\n\n11\n\n\n\n# Multiplier et assigner\nx *= 7  #\nprint(x)\n\n77\n\n\n\n# Diviser et assigner\nx /= 2  \nprint(x)\n\n38.5\n\n\n\n# Division entière et assigner\nx //= 3  \nprint(x)\n\n12.0\n\n\n\n# Modulo et assigner\nx %= 4  \nprint(x)\n\n0.0\n\n\n\n# Exponentielle et assigner\nx **= 6  \nprint(x)\n\n0.0"
  },
  {
    "objectID": "Fondamentaux.html#commentaires-et-affichage",
    "href": "Fondamentaux.html#commentaires-et-affichage",
    "title": "Les fondamentaux de Python",
    "section": "Commentaires et affichage",
    "text": "Commentaires et affichage\nLes commentaires sont utilisés pour expliquer le code.\nIls sont très utiles pour vous ainsi que pour toute personne qui lit votre code. Les commentaires démarrent par un # et vont jusqu’à la fin de la ligne\nLes commentaires sont ignorés lors de l’exécution du code.\n\n# Ceci est un commentaire tout simple \n\nz = 15  # Ceci est un commentaire qui suit une instruction\n\n# Vous pouvez utiliser les commentaires pour expliquer et/ou détailler\n# ce que votre code est censé faire :\ny = z + 22  # Ajout de 22 à z et stockage du résultat dans y\n\nPour l’affichage, la fonction print() est utilisée. Elle permet de montrer le texte, les nombres et d’autres objets sur la console.\n\nprint(\"Bonjour, la vie !\")  # Affiche un message simple\n\nnombre = 22\nprint(nombre)  # Affiche la valeur de la variable 'nombre'\n\n# Vous pouvez aussi combiner du texte et des variables :\nprint(\"Le valeur est\", nombre)  \n\nBonjour, la vie !\n22\nLe valeur est 22\n\n\nUtilisation de f-string seul\n\nbeau_prenom = 'Malow'\nage = 17\ntaille = 176\n\n# Formatage de chaînes avec f-string pour une meilleure lisibilité :\nprint(f\"Malow a {age} ans\") \nprint(f\"{beau_prenom}, est partie\")\n\nMalow a 17 ans\nMalow, est partie\n\n\nf-string avec plusieurs variables\n\nprint(f\"{beau_prenom} mesure {taille} mètres et a {age} ans\")\n\nMalow mesure 176 mètres et a 17 ans\n\n\nUtilisation de format()\n\nprint(\"{} a {} ans \".format(beau_prenom, age))\n\nMalow a 17 ans \n\n\n\nL’instruction précédente utilise la méthode .format() pour insérer les variables dans la chaîne de caractères.\nLes placeholders sont des {} qui seront remplacés par les arguments de .format() dans l’ordre.\nma_chaine et age seront insérés respectivement dans le premier et le second {}.\n\nCalcul et arrondi\n\nLe premier print(prop) affiche la valeur de prop avec tous ses chiffres après la virgule.\nLe second print() utilise une f-string avec un formatage spécifique {prop:.2f}.\n\nCela signifie que la valeur de prop sera formatée pour afficher seulement deux chiffres après la virgule.\n\nprop = 75436456 / 987\nprint(prop)\nprint(f\"le resultat est {prop:.3f}\")\n\n76430.0466058764\nle resultat est 76430.047"
  },
  {
    "objectID": "Fondamentaux.html#structure-de-contrôle",
    "href": "Fondamentaux.html#structure-de-contrôle",
    "title": "Les fondamentaux de Python",
    "section": "Structure de contrôle",
    "text": "Structure de contrôle\n\nLes opérateurs\nLes opérateurs Python sont employés pour exécuter des actions sur les variables et les valeurs.\n\nLes opérateurs de comparaison comprennent égal à, différent de, supérieur à, inférieur à, supérieur ou égal à, et inférieur ou égal à.\n\nRenvoient soit Vrai, soit Faux, en fonction du résultat de la comparaison.\n\n\n\n\n\nOpérateur comparaison\nDescription\n\n\n\n\n\nÉgalité\n==\n\n\n\nDifférent de\n!=\n\n\n\nSupérieur\n&gt;\n\n\n\nInférieur\n&lt;\n\n\n\nSupérieur ou égale\n&gt;=\n\n\n\nInférieur ou égale\n&lt;=\n\n\n\n\n\nLes opérateurs logiques et, ou et non sont fréquemment utilisés avec les opérateurs de comparaison.\n\n\n\n\nOpérateur logique\nDescription\nRésultat\n\n\n\n\nAnd\nand\nTrue si les deux propositions sont vraies\n\n\nOr\nor\nTrue si au moins une des propositions est Vraie\n\n\nNot\nnot\nInverse de l’instruction\n\n\n\n\nLes opérateurs d’appartenance in et not in servent à examiner si une valeur ou une chaîne de caractères est présente à l’intérieur d’une autre valeur, chaîne de caractère ou séquence.\n\n\n\n\n\n\n\n\n\nOpérateur logique\nDescription\nRésultat\n\n\n\n\nIn\nin\nTrue si la valeur spécifiée est présente dans l’objet\n\n\nNot In\nnot in\nTrue si la valeur spécifiée n’est pas présente dans l’objet\n\n\n\n\n# Exemples d'opérateurs de comparaison\nprint(\"Opérateurs :\")\nprint(6 == 6) # Égalité, renvoie True\nprint(6 != 3) # Différent de, renvoie True\nprint(6 &gt; 4) # Supérieur à, renvoie True\nprint(6 &lt; 9) # Inférieur à, renvoie True\nprint(6 &gt;= 4) # Supérieur ou égal à, renvoie True\nprint(6 &lt;= 9) # Inférieur ou égal à, renvoie True\n\nOpérateurs :\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\n\n\n# Opérateurs logiques \"and\"\n(6 &gt; 4) and (11 &lt; 101)\n\nTrue\n\n\n\nnot ((6 &gt; 4) and (10 &gt; 100))\n\nTrue\n\n\n\n## or \n(6 &gt; 4) or (10 &lt; 100)\n(6 &gt; 4) or (10 &gt; 100)\n\nTrue\n\n\n\n# operateurs d'appartenance\n# in et not in \nx = [6, 11, 24]\n10 in x\n10 not in x\n\nTrue\n\n\nChainer les comparateurs Il est également faisable de chainer les comparateurs:\n\na, b, c = 2, 20, 200\na &lt; b &lt; c\n\nTrue\n\n\n\na &gt; b &lt; c\n\nFalse\n\n\n\n\nLes conditions\n\n# condition\nx = 50 \n\n# Condition 1 : vérifie si x est inférieur à 40\nif x &lt; 40:\n    print(\"x est inférieur à 40\")\n\n# Condition 2 : vérifie si x est supérieur ou égal à 100 \nelif x &gt;= 10:\n    print(\"x est supérieur ou égal à 1000\")\n\n# Condition 3 : si toutes les conditions précédentes sont fausses\nelse:\n    print(\"x est supérieur à 40 mais inférieur à 1000\")\n\nx est supérieur ou égal à 1000\n\n\n\n# Initialisation des variables\nx = 20\ny = 40\n\n# Première condition : vérifie si x est inférieur à 5 ET y est supérieur à 15\nif (x &lt; 5) and (y &gt; 15):\n    print(\"x est inférieur à 5 et y est supérieur à 15\")\n\n# Deuxième condition : vérifie si x est supérieur ou égal à 20 OU y est supérieur ou égal à 40\nelif (x &gt;= 20) or (y &gt;= 40):\n    print(\"x est supérieur ou égal à 20 ou y est supérieur ou égal à 40\")\n\n# Dernière condition : si\n#  toutes les conditions précédentes sont fausses\nelse:\n    print(\"x est supérieur à 5\")\n\nx est supérieur ou égal à 20 ou y est supérieur ou égal à 40\n\n\n\n\nLes boucles\nLa boucle for est employée pour explorer différentes structures de données telles que des listes, des tuples, des tableaux, des chaînes de caractères ou encore des dictionnaires.\n\nCette boucle initie son itération en examinant le premier élément de la séquence. Elle exécute ensuite des actions spécifiées dans son bloc, puis passe à l’élément suivant jusqu’à ce que la séquence soit entièrement parcourue.\n\n\nCette boucle utilise le mot-clé “for” suivi d’une variable temporaire pour stocker chaque élément de la séquence, le mot-clé “in” pour spécifier la séquence à parcourir, et se termine par deux points. Elle continue son itération jusqu’à la fin de la séquence.\n\nÀ chaque étape, des opérations peuvent être effectuées sur la variable temporaire dans le bloc de la boucle afin de réaliser diverses actions.\nLes boucles peuvent être imbriquées pour des opérations plus complexes, tel que “for”\nDans le cas des dictionnaires, il est possible de parcourir à la fois les clés et les valeurs en utilisant la méthode “items()”.\n\n\n\nliste = list(range(4))\nliste\n\n[0, 1, 2, 3]\n\n\n\n# Exemple de boucle for\nfor M in liste:\n    print(M)\n\n0\n1\n2\n3\n\n\n\nfruits = [\"mûre\", \"pitaya\", \"coco\", \"myrtille\"]\nfor fruit in fruits:\n    print(fruit)\n\nmûre\npitaya\ncoco\nmyrtille\n\n\n\n# print(\"Boucle for sur une liste:\")\n# ma_liste = [6, 7, 8, 9, 10]\n# for element in ma_liste:\n#     print(element)\n\nnombres = [6, 7, 8, 9, 10]\nfor nombre in nombres:\n    if nombre % 2 == 0:\n        print(f\"{nombre} est pair\")\n    else:\n        print(f\"{nombre} est impair\")\n\n6 est pair\n7 est impair\n8 est pair\n9 est impair\n10 est pair\n\n\nLa boucle while fonctionne en itérant sur un bloc de code tant qu’une condition spécifiée reste vraie. Contrairement aux boucles “for”, les boucles “while” continuent leur itération tant que la condition reste vérifiée.\n\nPour sortir prématurément d’une boucle “while”, même si la condition est toujours vraie, on utilise l’instruction “break”.\nOn peut utiliser l’instruction “else” avec une boucle “while” pour exécuter un bloc de code lorsque la condition de la boucle n’est plus vraiee.\nL’instruction “continue” permet d’ignorer le reste du code dans l’itération actuelle de la boucle et de passer à l’itération suivante.\n!! Il est important de faire preuve de prudence lors de l’utilisation de “continue” afin d’éviter de créer des boucles infinies.\n\n\n# Boucle while avec break\nprint(\"\\nBoucle while avec break:\")\ni = 2\nwhile i &lt;= 6:\n    print(i)\n    if i == 4:\n        print(\"Break à 4\")\n        break\n    i += 2\n\n\nBoucle while avec break:\n2\n4\nBreak à 4\n\n\n\n# Boucle while avec continue\nprint(\"\\nBoucle while avec continue:\")\ni = 1\nwhile i &lt; 6:\n    i += 1\n    if i == 4:\n        continue\nprint(i)\n\n\nBoucle while avec continue:\n6\n\n\n\n# Boucle while avec else\nprint(\"\\nBoucle while avec else:\")\ni = 2\nwhile i &lt;= 6:\n    print(i)\n    i += 1\nelse:\n    print(\"La condition n'est plus vraie (i &gt; 6)\")\n\n\nBoucle while avec else:\n2\n3\n4\n5\n6\nLa condition n'est plus vraie (i &gt; 6)"
  },
  {
    "objectID": "Fondamentaux.html#types-de-données",
    "href": "Fondamentaux.html#types-de-données",
    "title": "Les fondamentaux de Python",
    "section": "Types de données",
    "text": "Types de données\nChaque type de données séquentielles possède ses propres caractéristiques et utilisations spécifiques, offrant ainsi une grande flexibilité dans le traitement des données. Les listes et les dictionnaires sont particulièrement prisés pour leur souplesse et leurs capacités de stockage dynamique.\n\nLes chaines de caractères\nLes chaînes de caractères (str) servent à stocker et à manipuler du texte. Elles sont définies en encadrant le texte entre guillemets simples ('...'), doubles (\"...\") ou triples ('''...''' ou \"\"\"...\"\"\" pour les chaînes sur plusieurs lignes).\n\n\nSéquences de caractères, indexées à partir de 0.\nPeuvent être délimitées par des guillemets simples, doubles ou triples.\nExemple : \"Mareva\", 'Prog'.\nCaractères d’Échappement : pour inclure des caractères spéciaux comme des guillemets ou des retours à la ligne dans une chaîne, utilisez des caractères d’échappement (\\).\n\nLes chaînes de caractères offrent une polyvalence exceptionnelle et proposent une multitude de méthodes pour le traitement de texte. Qu’il s’agisse de manipulations élémentaires ou d’opérations plus complexes, les chaînes sont un atout indispensable.\n\n# Définition chaines de caractères\nchaine_simple = 'Hello'\nlongueur = len(chaine_simple) \nprint(f\"{chaine_simple}, 'la longueur est {longueur}\")\n\nHello, 'la longueur est 5\n\n\n\nFonctionnalités des méthodes pour les chaînes de caractères : Les méthodes sont des fonctions associées à des objets spécifiques. Elles permettent d’effectuer des actions sur ces objets ou de manipuler leurs données internes. Voici quelques points essentiels à propos des méthodes :\nLiaison avec des Objets : Contrairement aux fonctions indépendantes, les méthodes sont liées à des objets. Par exemple, les méthodes des chaînes de caractères (str) sont conçues pour opérer sur des chaînes de caractères spécifiques.\nSyntaxe : Une méthode est invoquée en utilisant la notation pointée. Par exemple, objet.methode().\nMéthodes pour les chaînes de caractères : Les chaînes de caractères possèdent des méthodes telles que upper(), lower() et replace() pour convertir en majuscules, en minuscules ou remplacer une partie de la chaîne.\nAppel : Pour appeler une méthode, utilisez généralement la syntaxe objet.methode(arguments).\n\n\n# Méthodes str.isupper() et str.islower()\nmajuscules = \"MAREVA\"\nminuscules = \"Mareva\"\n\nis_upper = majuscules.isupper()\nis_lower = minuscules.islower()\nprint(is_upper) \nprint(is_lower)  \n\nTrue\nFalse\n\n\n\n# Méthode str.upper()\ntexte_upper = \"la progra c'est génial\".upper()\nprint(texte_upper) \n\nLA PROGRA C'EST GÉNIAL\n\n\n\n# Méthode str.lower()\ntexte_lower = \"La Progra c'est GENIAL\".lower()\nprint(texte_lower) \n\nla progra c'est genial\n\n\n\n# Méthode str.capitalize()\ntexte_capitalize = \"la progra c'est génial\".capitalize()\nprint(texte_capitalize) \n\nLa progra c'est génial\n\n\n\n# Méthode str.title()\ntexte_title = \"la progra c'est génial\".title()\nprint(texte_title) \n\nLa Progra C'Est Génial\n\n\n\n# Méthode str.find(substring)\ntexte = \"Progra c'est génial\"\nposition = texte.find(\"c'est\")\nprint(position) \n\n7\n\n\n\n# Méthode str.replace(old, new)\ntexte_replace = \"Les pommes sont rouges.\".replace(\"pommes\", \"feux\")\nprint(texte_replace)  \n\nLes feux sont rouges.\n\n\n\n# Méthode str.split(separator)\ntexte_split = \"coco mangue litchi\".split(\" \")\nprint(texte_split) \n\n['coco', 'mangue', 'litchi']\n\n\n\n# Méthode str.join(iterable)\nelements = [\"coraux\", \"nature\", \"ocean\"]\ntexte_join = \", \".join(elements)\nprint(texte_join) \n\ncoraux, nature, ocean\n\n\n\n# Méthode str.strip()\ntexte_strip = \"   Hey   \".strip()\nprint(texte_strip) \n\nHey\n\n\n\n# Méthode str.startswith(prefix)\ntexte_startswith = \"Bonjour, comment vas-tu ? \".startswith(\"Bonjour\")\nprint(texte_startswith)  \n\nTrue\n\n\n\n# Méthode str.endswith(suffix)\ntexte_endswith = \"Statut confirmé.\".endswith(\"confirmé.\")\nprint(texte_endswith)\n\nTrue\n\n\n\n\nLes listes\nLes listes sont des structures de données qui permettent de stocker une série d’éléments. Elles sont flexibles, peuvent contenir des éléments de différents types et sont mutables (modifiables).\n\nListes (list) :\n\nCollections ordonnées de valeurs, capables d’accueillir divers types de données.\nLes éléments sont séparés par des virgules et encadrés par des crochets.\nMutables (modifiables).\nPour créer une liste, il suffit d’entourer une série d’éléments séparés par des virgules avec des crochets []. Par exemple : [3, \"m\", 4.20].\nL’accès aux éléments se fait par leur index, en commençant par 0.\nLes listes étant mutables, vous pouvez modifier leurs éléments.\n\n\n\n# Définition de liste\nma_liste = [3, 4, 5, \"Progra\", 4.20, False]\nprint(ma_liste)\n\npremier_element = ma_liste[0]  # Accède au premier élément (1)\ndernier_element = ma_liste[-1] # Accède au dernier élément (False)\nprint(premier_element,\"\\n\", dernier_element)\n\n[3, 4, 5, 'Progra', 4.2, False]\n3 \n False\n\n\n\n # Modifie le deuxième élément\nma_liste[1] = \"deux\" \nprint(ma_liste)\n\n[3, 'deux', 5, 'Progra', 4.2, False]\n\n\n\n# Concaténation et Répétition\ncombinee = ma_liste + [\"autre\", \"liste\"]\nprint(combinee)\nrepetee = [1, 2, 3] * 3\nprint(repetee)\n\n[3, 'deux', 5, 'Progra', 4.2, False, 'autre', 'liste']\n[1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n\n\nLe Slicing : En plus d’accéder aux éléments d’une chaine un par un, Python fournit une syntaxe concise pour accéder aux sous-listes; cela est connu sous le nom de slicing :\n\nLa fonction intégrée range() permet de créer une liste d’entiers\n\nnums = list(range(6)) \nnums                  \n\n[0, 1, 2, 3, 4, 5]\n\n\n\n# Pour obtenir une tranche de l'index 4 à 8(exclusif)\nnums[2:6]   \n\n[2, 3, 4, 5]\n\n\n\n# Pour obtenir une tranche de l'index 4 jusqu'à la fin\nnums[4:]            \n\n[4, 5]\n\n\n\n# Pour obtenir une tranche du début jusqu'à l'index 4 (exclusif)\nnums[:4]       \n\n[0, 1, 2, 3]\n\n\n\n# Pour obtenir une tranche de toute la liste\nnums[:]    \n\n[0, 1, 2, 3, 4, 5]\n\n\n\n# Les indices de tranche peuvent être négatifs\nnums[:-1]           \n\n[0, 1, 2, 3, 4]\n\n\n\n# Les indices de tranche peuvent être négatifs pour inverser l'ordre\nnums[::-1]           \n\n[5, 4, 3, 2, 1, 0]\n\n\n\nLes méthodes des listes : Chaque méthode propose une fonctionnalité distincte pour manipuler des listes, conférant à ces structures de données une grande souplesse et une puissance considérable dans une variété de tâches en programmation Python.\n\n\n\n\n\n\n\n\n\nMéthode\nDescription\nExemple\n\n\n\n\nappend()\nAjoute un élément à la fin de la liste\nlist.append(8)\n\n\nextend()\nÉtend la liste en ajoutant tous les éléments d’une autre liste\nlist.extend([9, 12])\n\n\ninsert()\nInsère un élément à une position donnée\nliste.insert(4, d)\n\n\nremove()\nSupprime la première occurrence d’un élément\nliste.remove('d')\n\n\npop()\nSupprime et renvoie un élément à une position donnée (par défaut ,le dernier)\nliste.pop()\n\n\nclear()\nSupprime tous les éléments de la liste\nliste.clear()\n\n\nindex()\nRetourne l’indice du premier élément correspondant\nliste.index('d')\n\n\ncount()\nCompte le nombre d’occurences d’une élément spécifique\nliste.count(8)\n\n\nsort()\nTrie les élément de la liste (dans un ordre spécifique)\nliste.sort()\n\n\nreverse()\nInverse l’ordre des éléments de la liste\nliste.reverse()\n\n\n\n\n# Création d'une liste de base\nma_liste = [1, 2, 3]\nprint(ma_liste)\n\n[1, 2, 3]\n\n\n\nParcours de Liste Le parcours de liste consiste à accéder séquentiellement à chaque élément d’une liste. CEtte opération peut être faite de différentes manières, mais les approches les plus courantes sont les boucles for et while.\n\nBoucle for : la méthode la plus répandu pour parcourir une liste. Elle permet de traiter chaque élément individuellement.\nList Comprehension : une méthode concise pour générer des listes. Elle facilite la transformation d’une liste en une autre liste, en filtrant les éléments selon une expression donnée.\n\n\nLa syntaxe de base d’une compréhension de liste est :\n[nouvelle_expression for item in iterable if condition]\n\nnouvelle_expression est l’expression qui définit comment mapper les éléments de l’iterable (par exemple, une liste).\nitem est la variable qui prend la valeur de chaque élément de l’iterable pendant chaque itération.\ncondition est une condition optionnelle pour filtrer les éléments de l’iterable.\n\n\n# récupérer tous les fruits avec un \"a\"\nfruits = [\"poire\", \"fraise\", \"kiwi\", \"pitaya\", \"mangue\"]\nnewlist = []\n\nfor f in fruits:\n    if \"a\" in f:\n        newlist.append(f)\n\nprint(newlist)\n\n['fraise', 'pitaya', 'mangue']\n\n\n\nnewlist = [f for f in fruits if \"a\" in f ]\nprint(newlist)\n\n['fraise', 'pitaya', 'mangue']\n\n\n\nnombre = [1, 10, 100]\nnombre_carres = [x**2 for x in nombre]\nnombre_carres\n\n[1, 100, 10000]\n\n\nAvec des boucles imbriquées\nVoici une boucle for qui aplatit une matrice (une liste de listes) :\n\n# Définition d'une matrice\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]]\n\nflattened = []\nfor row in matrix:\n    for n in row:\n        flattened.append(n)\n\nprint(flattened)\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\nEt voici une compréhension de liste qui fait la même chose :\n\nflattened = [n for row in matrix for n in row]\n\n\n\nLes tuples\nLes tuples sont :\n\nSimilaires aux listes, mais immuables (non modifiables après création).\nLes éléments sont séparés par des virgules et entourés de parenthèses.\nExemple : (1, “a”, 3.14).\n\n\n\n\n\n\n\n\n\nAvantage\nDescription\n\n\n\n\n\nSécurité des données\nParfait pour protéger les données contre les modifications\n\n\n\nPerformance\nPlus rapide à parcourir que les listes\n\n\n\nutilisation en tant queClé de Dictionnaire\nPeuvent être utilisés comme clés dans les dictionnaires, contrairement aux listes\n\n\n\nRetour de plusieurs valeurs de fonction\nUtilisé pour retourner plusieurs valeurs depuis une fonction\n\n\n\nStockage de données constantes\nIdéaux pour stocker des données qui ne doivent pas être modifiées\n\n\n\n\n\n# Définition d'un tuple\nmon_tuple = (2, \"b\", 4.20)\nmon_tuple\n\n(2, 'b', 4.2)\n\n\n\nun_autre_tuple = 3, \"z\", 4.30\nun_autre_tuple\n\n(3, 'z', 4.3)\n\n\n\nmon_tuple[1] \n\n'b'\n\n\n\n# Tuple à Un Élément\ntuple_singleton = 6,\ntuple_singleton\n\n(6,)\n\n\n\n# Tuple à Un Élément\ntuple_singleton = (5,)\n\n# Imbrication\ntuple_imbrique = (1, (2, 3), (4, 5))\n\n\n\nLes ensembles\n\nCollections non ordonnées de valeurs uniques.\nUtiles pour les opérations d’ensemble et la recherche de valeurs uniques.\nMutables, mais chaque élément doit être unique.\nNon-Ordonnés : Les ensembles ne maintiennent pas l’ordre des éléments. Vous ne pouvez donc pas accéder aux éléments par un index. Exemple : {1, 2, 3}.\n\nOpérations d’Ensemble\n\n\n\n\n\n\n\n\nOpération\nSyntaxe\nDescription\n\n\n\n\nUnion\na | b\nRetourne un nouvel ensemble contenant tous les éléments uniques des ensembles a et b\n\n\nIntersection\na & b\nRetourne un nouvel ensemble contenant uniquement les éléments communs aux ensembles a et b\n\n\nDifférence\na - b\nRetourne un nouvel ensemble contenant les éléments de a qui ne sont pas dans b\n\n\nDifférence symétrique\na ^ b\nRetourne un nouvel ensemble contenant tous les éléments qui sont dans a ou b, mais pas dans les deux\n\n\nAjout\na.add(x)\nAjoute l’élément x à l’ensemble a\n\n\nSuppression\na.remove(x)\nSupprime l’élément x de l’ensemble a ; lève une erreur si x n’est pas présent\n\n\nSuppression (sans erreur)\na.discard(x)\nSupprime l’élément x de l’ensemble a si x est présent ; ne fait rien sinon\n\n\n\n\n# Définition des ensembles\nensemble_a = {1, 2, 3, 4}\nensemble_b = {3, 4, 5, 6}\nprint(ensemble_a, ensemble_b)\n\n# Seule une valeur est représentée\nensemble_c = {1, 1, 1}\nprint(ensemble_c)\n\n{1, 2, 3, 4} {3, 4, 5, 6}\n{1}\n\n\n\n# Opérations d'ensemble\nunion = ensemble_a | ensemble_b\nintersection = ensemble_a & ensemble_b\ndifference_a = ensemble_a - ensemble_b\ndifference_b = ensemble_b - ensemble_a\ndifference_symetrique = ensemble_a ^ ensemble_b\n\n# Affichage des résultats\nprint(\"Union :\", union)\nprint(\"Intersection :\", intersection)\nprint(\"Différence a :\", difference_a)\nprint(\"Différence b :\", difference_b)\nprint(\"Différence Symétrique :\", difference_symetrique)\nprint(ensemble_a)\n\nUnion : {1, 2, 3, 4, 5, 6}\nIntersection : {3, 4}\nDifférence a : {1, 2}\nDifférence b : {5, 6}\nDifférence Symétrique : {1, 2, 5, 6}\n{1, 2, 3, 4}\n\n\n\n# Ajout et suppression\nensemble_a.add(7)\nprint(\"Après ajout :\", ensemble_a)\n\nAprès ajout : {1, 2, 3, 4, 7}\n\n\n\nensemble_a.remove(1)\nprint(\"Après suppression :\", ensemble_a)\n\nAprès suppression : {2, 3, 4, 7}\n\n\n\nensemble_a.discard(2)  \nensemble_a\n\n{3, 4, 7}\n\n\n\n\nLes dictionnaires\nLes dictionnaires sont :\n\nBasés sur des paires clé-valeur.\nLes valeurs sont accessibles via les clés.\nMutables, permettant les mises à jour et les suppressions.\nExemple : {“nom”: “Alice”, “âge”: 30}.\nUtilisation :\n\nStockage d’Informations Structurées : Parfait pour stocker des informations complexes comme des données utilisateur.\nRecherche Rapide : Utilisez des dictionnaires pour des recherches rapides basées sur des clés uniques.\n\n\n\n# Définition d'un dictionnaire\npersonne = {\"nom\": \"Perez\", \"age\": 21}\nautre_dict = dict(nom=\"Danloue\", age=22)\nprint(personne)\n\n{'nom': 'Perez', 'age': 21}\n\n\n\n# Ajout et Mise à Jour\npersonne[\"poste\"] = \"Développeuse\"\nprint(personne)\n\n{'nom': 'Perez', 'age': 21, 'poste': 'Développeuse'}\n\n\n\n# Mise à Jour de plusieurs clés\npersonne.update([('nom', \"Lavis\"), ('poste', \"Data Analyst\")])\nprint(personne)\n\n{'nom': 'Lavis', 'age': 21, 'poste': 'Data Analyst'}\n\n\n\n# Utilisation de keys()\ncles = personne.keys()\nprint(\"Clés:\", cles)\n\n# Utilisation de values()\nvaleurs = personne.values()\nprint(\"Valeurs:\", valeurs)\n\n# Utilisation de items()\npaires = personne.items()\nprint(\"Paires clé-valeur:\", paires)\n\nClés: dict_keys(['nom', 'age', 'poste'])\nValeurs: dict_values(['Lavis', 21, 'Data Analyst'])\nPaires clé-valeur: dict_items([('nom', 'Lavis'), ('age', 21), ('poste', 'Data Analyst')])\n\n\n\n# Utilisation de get()\nnom_personne = personne.get(\"nom\") \nage_personne = personne.get(\"age\")\n\nprint(nom_personne, age_personne)\n\nLavis 21\n\n\n\nville = personne.get(\"ville\")\nprint(ville)\n\nNone\n\n\n\nville = personne.get(\"ville\", \"Non spécifiée\") \nprint(\"Ville:\", ville)\n\nVille: Non spécifiée\n\n\n\n# Parcours des clés\nprint(\"\\nParcours des clés:\")\nfor cle in personne.keys():\n    print(cle)\n\n# Parcours des valeurs\nprint(\"\\nParcours des valeurs:\")\nfor valeur in personne.values():\n    print(valeur)\n\n# Parcours des paires clé-valeur\nprint(\"\\nParcours des paires clé-valeur:\")\nfor cle, valeur in personne.items():\n    print(cle, \":\", valeur)\n\n\nParcours des clés:\nnom\nage\nposte\n\nParcours des valeurs:\nLavis\n21\nData Analyst\n\nParcours des paires clé-valeur:\nnom : Lavis\nage : 21\nposte : Data Analyst\n\n\n\nprint(\"\\nParcours des paires clé-valeur avec enumerate:\")\nfor index, (cle, valeur) in enumerate(personne.items()):\n    print(f\"Index {index}: Clé = {cle}, Valeur = {valeur}\")\n\n\nParcours des paires clé-valeur avec enumerate:\nIndex 0: Clé = nom, Valeur = Lavis\nIndex 1: Clé = age, Valeur = 21\nIndex 2: Clé = poste, Valeur = Data Analyst\n\n\n\npersonne\n\n{'nom': 'Lavis', 'age': 21, 'poste': 'Data Analyst'}\n\n\n\n# Suppression\ndel personne[\"age\"]\n\n\npersonne\n\n{'nom': 'Lavis', 'poste': 'Data Analyst'}\n\n\n\nposte = personne.pop(\"poste\")\n\n\nposte\n\n'Data Analyst'\n\n\n\npersonne\n\n{'nom': 'Lavis'}"
  },
  {
    "objectID": "Fondamentaux.html#fonctions-définition-et-rappel",
    "href": "Fondamentaux.html#fonctions-définition-et-rappel",
    "title": "Les fondamentaux de Python",
    "section": "Fonctions : définition et rappel",
    "text": "Fonctions : définition et rappel\nQu’est-ce qu’une Fonction ? Une fonction représente une séquence d’instructions accessible via un nom spécifique. En programmation, elle agit comme une entité autonome, prenant éventuellement des paramètres en entrée, exécutant des opérations définies, et parfois fournissant une sortie.\n\nExplication de ce qu’est une fonction en programmation En Programmation, une fonction se définti à l’aide du mot-clé def, suivi du nom de la fonction, des parenthèses () contenant des paramètres (si nécessaires), et un bloc d’instructions indenté.\nL’importance des fonctions pour réduire la répétition de code Les fonctions jouent un rôle crucial dans la réduction de la redondance du code. Elles permettent de rassembler des segments de code similaires, simplifiant ainsi sa gestion, sa lecture et son entretien.\n\nPourquoi Utiliser des Fonctions ? Les fonctions apportent une valeur ajoutée pour plusieurs raisons :\n\nSimplification du code En encapsulant des séquences complexes d’opérations dans des fonctions, on rend le code principal plus concis et plus intelligible.\nRéutilisabilité Une fois définie, une fonction peut être invoquée à volonté, évitant ainsi la duplication de code, ce qui économise du temps et diminue les risques d’erreurs.\nMeilleure organisation du code Les fonctions contribuent à structurer le code en unités logiques, chacune ayant un objectif spécifique. Cette approche facilite la compréhension globale du programme, ainsi que le débogage et le test des parties distinctes.\n\nVoici une présentation de la section “Syntaxe de Base des Fonctions” avec des explications et des exemples, rédigée en Markdown :\n\ndef ma_fonction():\n    print(\"Ceci est une fonction.\")\n\nDans cet exemple, ma_fonction est le nom de notre fonction. Le bloc d’instructions qui suit définit ce que la fonction fait lorsqu’elle est appelée. Ici, la fonction affiche simplement un message = “Ceci est une fonction”\nElle n’est exécutée que lorsque la fonction est appelée.\n\nAppel d’une Fonction Une fois qu’une fonction est définie, elle peut être appelée en utilisant son nom suivi de ses parenthèses.\n\n\nma_fonction()\n\nCeci est une fonction.\n\n\nCet appel exécute les instructions définies dans ma_fonction.\n\nParamètres et Arguments Lorsqu’une fonction accepte des paramètres, elle devient plus adaptable. Ces paramètres remplissent le rôle de variables dans la définition de la fonction.\n\n\ndef ma_fonction(param1, param2):\n    print(f\"Paramètre 1 : {param1}, Paramètre 2 : {param2}\")\ndef saluer(nom):\n    print(f\"Bonjour, {nom}!\")\n\nIci, nom est un paramètre de la fonction saluer. Lorsque la fonction est appelée, elle s’attend à recevoir une valeur pour ce paramètre.\n\nAppel d’une Fonction avec Arguments Lorsque vous appelez une fonction qui a des paramètres, vous devez fournir des arguments correspondants.\n\nDans cet appel, \"Mareva\" est un argument qui est passé à la fonction saluer. La fonction utilisera la valeur de cet argument lors de son exécution.\n\nLes paramètres et arguments\nLes paramètres d’une fonction sont des variables définies à l’intérieur de sa structure. Ils servent de réceptacles pour les valeurs (arguments) que la fonction traitera lorsqu’elle est invoquée.\nDifférence entre Paramètres et Arguments * Les paramètres sont les noms des variables définies dans la structure de la fonction. Ils servent à faire référence aux valeurs qui seront passées lors de l’appel de la fonction.\n\nLes arguments sont les valeurs réelles fournies à la fonction lors de son appel. Ces valeurs sont assignées aux paramètres correspondants de la fonction.\n\nValeurs par Défaut des Paramètres Les fonctions peuvent inclure des paramètres avec des valeurs par défaut. Ces valeurs sont utilisées si aucun argument correspondant n’est fourni lors de l’appel de la fonction.\n\ndef ma_fonction(param1, param2=15):\n    print(f\"Paramètre 1 : {param1}, Paramètre 2 : {param2}\")\n\nDans cet exemple, param2 a une valeur par défaut de 15. Si ma_fonction est appelée sans un second argument, param2 utilisera cette valeur par défaut.\nLes valeurs par défaut rendent les fonctions plus flexibles et permettent d’éviter des erreurs si certains arguments ne sont pas essentiels. Voici un exemple d’appel de la fonction avec et sans le second argument :\n\nma_fonction(\"test\")       \nma_fonction(\"test\", 24)     \ndef ma_fonction(param1, param2=42):\n    print(f\"Paramètre 1 : {param1}, Paramètre 2 : {param2}\")\n\nParamètre 1 : test, Paramètre 2 : 15\nParamètre 1 : test, Paramètre 2 : 24\n\n\n\nma_fonction(2)\n\nParamètre 1 : 2, Paramètre 2 : 42\n\n\n\nma_fonction(2, 30)\n\nParamètre 1 : 2, Paramètre 2 : 30\n\n\n\n\nLes types de fonctions\nIl y a deux catégories principales de fonctions : celles qui produisent une sortie et celles qui n’en produisent pas.\n\nFonctions avec Retour : Une fonction de ce type renvoie une valeur à l’endroit où elle est appelée, utilisant le mot-clé return.\nFonctions sans Retour: Les fonctions de cette catégorie réalisent des actions mais ne génèrent aucune sortie. Elles sont souvent employées pour effectuer des tâches comme l’affichage de messages ou la modification de données.\n\n\ndef ma_fonction():\n    return \"valeur return\"\n\nCette fonction retourne la chaîne de caractères \"valeur return\". Lorsqu’elle est appelée, on peut récupérer cette valeur :\n\nresultat = ma_fonction()\nprint(resultat)  \ndef ma_fonction():\n    print(\"Fonction exécutée\")\n\nvaleur return\n\n\nCette fonction affiche un message mais ne retourne rien. L’appel de cette fonction se concentre sur l’effet produit (ici, l’affichage) plutôt que sur une valeur retournée.\n\ndef divison_par_deux(a, b = 2):\n    print( a / b )\n\nresultat = divison_par_deux(5)\nprint(resultat)\n\n2.5\nNone\n\n\n\ndef divison_par_deux(a, b = 2):\n    return a / b\n\nresultat = divison_par_deux(5)\nprint(resultat)\n\n2.5\n\n\n\ndef carre(nombre):\n    return nombre * nombre\n\nresultat = carre(4)\nprint(resultat) \n\n16\n\n\n\ndef celsius_en_fahrenheit(celsius):\n    return (celsius * 9/5) + 32\n\ntemperature_fahrenheit = celsius_en_fahrenheit(0)\nprint(temperature_fahrenheit)  \n\n32.0\n\n\n\ndef est_pair(nombre):\n    return nombre % 2 == 0\n\nresultat = est_pair(10)\nprint(resultat)  \n\nTrue\n\n\n\ndef maximum(a, b):\n    if a &gt; b:\n        return a\n    else:\n        return b\nmax_nombre = maximum(10, 20)\nprint(max_nombre)  \n\n20\n\n\n\n\nLa portée des variables\nLa portée d’une variable détermine où dans le code elle est accessible. En Python, les variables peuvent avoir une portée locale ou globale.\n\nx = \"global\"  \nx\n\n'global'\n\n\n\ndef ma_fonction():\n    x = \"local\"  \n    print(x)\n\nma_fonction()\nx\n\nlocal\n\n\n'global'\n\n\nLes variables globales sont utiles pour partager des données entre différentes parties d’un programme.\nCependant, il faut les utiliser avec prudence pour éviter des problèmes de conception.\n\n\nNombre variable d’arguments\nVous pouvez créer des fonctions qui acceptent un nombre variable d’arguments grâce à *args pour les listes et **kwargs pour les dictionnaires de mots-clés.\n\ndef multiplication(a, b, c=None, d=None, e=None, f=None):\n    return a * b\n\nmultiplication(2, 3)\n\n6\n\n\n\nimport numpy as np\n# On ne connaît pas les nombre à l'avance\ndef multiplication(*nombre):\n    res = np.prod(nombre)\n    return res\n\n\nmultiplication(4, 3, 4, 90)\n\n4320\n\n\n\ndef multiplication(*nombre):\n    print(nombre[0]*nombre[1]*nombre[2]*nombre[3])\n\n\nmultiplication(4, 3, 4, 90)\ndef param_args(*parametres):\n    print(parametres[0]*parametres[1])\n    print(f\"Message : {parametres[2]}\")\n    \nparam_args(2, 3, \"Hello!\")\n\n4320\n6\nMessage : Hello!\n\n\n\ndef nombre_args(*args):\n    return len(args)\nargs_tuple = (5, 6, 8, 9)\nnombre_args(*args_tuple) # mettre etoile pour le tuple\n\n4\n\n\n\n# pratique pour définir des clé d'arguments\ndef nombre_kwarg(**nombre):\n    print('Mon age est : ' + nombre['age'] + ' ans' + ' et ma taille est : ' + nombre[\"taille\"] + ' metres')\n\nnombre_kwarg(age  = '21', taille = '1.63', profession = \"Star\")\n\nMon age est : 21 ans et ma taille est : 1.63 metres\n\n\n\n# `args` est un tuple contenant tous les arguments positionnels\n# `kwargs` est un dictionnaire contenant tous les arguments nommés.\n\ndef ma_fonction(*args, **kwargs):\n    print(\"args:\", args)\n    print(\"kwargs:\", kwargs)\n\nma_fonction(1, 2, 3, nom=\"Mareva\", age=21)\n\nargs: (1, 2, 3)\nkwargs: {'nom': 'Mareva', 'age': 21}\n\n\n\nBonnes Pratiques Il est essentiel de nommer clairement les fonctions dans votre code pour en améliorer la lisibilité et la maintenabilité. Les noms de fonctions doivent être descriptifs et indiquer clairement ce qu’elles font. Voici quelques conseils à suivre :\n\nUtilisez des noms descriptifs qui reflètent la fonction, de la fonction.\nPrivilégiez l’utilisation de verbes pour les fonctions qui effectuent des actions.\nÉvitez les abréviations non évidentes qui pourraient rendre le code difficile à comprendre.\nDocumentez vos fonctions avec des docstrings pour aider les autres programmeurs (et vous-même dans le futur) à comprendre rapidement ce que fait chaque fonction. Elles sont placées juste sous la définition de la fonction et sont entourées de triples guillemets.\n\n\n\ndef ma_fonction():\n    \"\"\"\n    Description de ce que fait la fonction.\n    Peut inclure des détails sur les paramètres et la valeur de retour.\n    \"\"\"\n    # corps de la fonction\n\n\n# fonction qui renvoie un nombre à la puissance\ndef nombre_puissance(nombre, puissance): \n    # documenter le code\n    \"\"\"\n    cette fonction calcule un nombre à la puissance et retourne le résultat.    \n    Parameters:    \n    nombre    (int): le premier nombre \n    puissance (int): le deuxième nombre    \n    Returns   (int): le resultat nombre a la puissance     \n    \n    \"\"\"\n    return nombre ** puissance\n\n\nIntéraction avec un utilisateur\n\nnum = int(input(\"Saississez un nombre entier : \"))\npower = int(input(\"Saississez une puissance : \"))\n\n\nLes fonctions et la récursivité\nLa récursivité, un principe clé en programmation, est solidement pris en charge par Python. Elle implique qu’une fonction s’appelle elle-même dans sa propre définition. Bien que cela puisse sembler déconcertant au départ, c’est une technique extrêmement efficace pour résoudre certains types de problèmes, notamment ceux qui peuvent être décomposés en sous-problèmes plus petits et similaires.\n\ndef countdown(n):\n    if n &lt;= 0:\n        print(\"Lancement terminé!\")\n    else:\n        print(n)\n        countdown(n - 1)\n\ncountdown(5)\n\n5\n4\n3\n2\n1\nLancement terminé!\n\n\nDans cet exemple, la fonction countdown prend un nombre entier n en paramètre. Si n est inférieur ou égal à zéro, la fonction affiche “Lancement terminé!”. Sinon, elle affiche la valeur actuelle de n puis appelle elle-même avec n - 1.\nLa récursivité doit être utilisée avec prudence, car une mauvaise utilisation peut entraîner des erreurs de débordement de pile (stack overflow).\nCela se produit lorsque trop de fonctions récursives sont empilées sur la pile d’appels du programme.\n\nIl est important de s’assurer qu’il y ait un cas de base dans la récursivité, c’est-à-dire une condition qui arrête les appels récursifs. Sinon, la fonction continuera à s’appeler elle-même indéfiniment.\n\n\n\nGénérateurs et décorateurs\nLes générateurs sont des structures puissantes en Python permettant de créer des itérables de manière efficace et sans consommer beaucoup de mémoire.\nContrairement aux listes, les générateurs produisent des valeurs au fur et à mesure de leur utilisation, ce qui les rend idéaux pour traiter de grandes quantités de données de manière efficace.\n\nUn générateur est une fonction qui utilise le mot-clé yield pour renvoyer des valeurs.\nLorsqu’une fonction contient yield, elle devient un générateur.\nChaque fois que le générateur est appelé, il exécute son code jusqu’à ce qu’il rencontre l’instruction yield.\nÀ ce moment-là, il renvoie la valeur spécifiée et se met en pause, en conservant son état.\nLorsqu’il est rappelé, il reprend à partir de l’instruction yield précédente.\n\n\ndef mon_generateur():\n    yield 1\n    yield 2\n    yield 3\n\n# Utilisation du générateur\ngen = mon_generateur()\n\n# Utilisation d'une boucle for pour itérer sur tous les éléments du générateur\nfor element in gen:\n    print(element)\n\n1\n2\n3\n\n\nDans cet exemple, chaque yield renvoie une valeur successive à chaque appel de next().\nLorsque toutes les valeurs ont été renvoyées, le générateur lève une exception StopIteration.\n\ndef pairs_infinis():\n    n = 0\n    while True:\n        yield n\n        n += 2\n\n# Utilisation du générateur\ngen = pairs_infinis()\n\nfor _ in range(10):\n    print(next(gen)) # Affiche : 0, 2, 4, 6, 8\n\n0\n2\n4\n6\n8\n10\n12\n14\n16\n18\n\n\n\ndef fibonacci(n):\n    sequence = [0, 1]\n    while len(sequence) &lt; n:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence\n\n# Utilisation de la fonction\nprint(fibonacci(10))  # Affiche les 10 premiers nombres de la séquence Fibonacci\n\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n\n\n\ndef fibonacci():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\n# Utilisation du générateur\ngen = fibonacci()\nfor _ in range(10):\n    print(next(gen)) # Affiche les 10 premiers nombres de la séquence Fibonacci\n\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n\n\n\nimport random\nimport string\n\ndef chaine_aleatoire(longueur):\n    while True:\n        yield ''.join(random.choices(string.ascii_letters, k=longueur))\n\n# Utilisation du générateur\ngen = chaine_aleatoire(5)\nfor _ in range(3):\n    print(next(gen)) # Affiche 3 chaînes de 5 caractères aléatoires\n\nZHFss\naVNfl\nXqCEu\n\n\nEn Python, les décorateurs sont des fonctions qui prennent une autre fonction comme argument, ajoutent un comportement supplémentaire à cette fonction, puis la renvoient sans la modifier.\nLes décorateurs utilisent généralement la fonction @decorateur juste avant la définition de la fonction à décorer.\n\ndef decorateur(fonction):\n    def fonction_decoration():\n        print(\"Début de la fonction décorée\")\n        fonction()\n        print(\"Fin de la fonction décorée\")\n    return fonction_decoration\n\n@decorateur\ndef ma_fonction():\n    print(\"Corps de ma fonction\")\n\n# Utilisation de la fonction décorée\nma_fonction()\n\nDébut de la fonction décorée\nCorps de ma fonction\nFin de la fonction décorée\n\n\nDans cet exemple, le décorateur decorateur ajoute un comportement d’impression avant et après l’exécution de la fonction ma_fonction.\nLes décorateurs peuvent également prendre des arguments. Pour cela, il faut ajouter une couche de fonctionnalité supplémentaire pour accepter ces arguments.\n\ndef decorateur_args(argument):\n    def decorateur(fonction):\n        def fonction_decoration():\n            print(\"Début de la fonction décorée avec l'argument :\", argument)\n            fonction()\n            print(\"Fin de la fonction décorée avec l'argument :\", argument)\n        return fonction_decoration\n    return decorateur\n\n@decorateur_args(\"mon_argument\")\ndef ma_fonction():\n    print(\"Corps de ma fonction\")\n\n# Utilisation de la fonction décorée\nma_fonction()\n\nDébut de la fonction décorée avec l'argument : mon_argument\nCorps de ma fonction\nFin de la fonction décorée avec l'argument : mon_argument\n\n\nLes décorateurs sont un aspect avancé de Python, mais ils offrent une puissante fonctionnalité pour étendre et modifier le comportement des fonctions et des méthodes de manière flexible et élégante. En comprenant les principes de base des décorateurs et leur utilisation avancée, vous pouvez améliorer la lisibilité, la réutilisabilité et la modularité de votre code Python.\n\n\nLes décorateurs peuvent retourner une fonction au lieu de la fonction décorée elle-même, ce qui permet de contrôler davantage le comportement de la fonction.\n\n\nLes décorateurs peuvent également être appliqués aux méthodes de classe pour étendre ou modifier le comportement des méthodes.\n\n\nIl est possible d’empiler plusieurs décorateurs sur une même fonction pour ajouter plusieurs couches de fonctionnalités."
  },
  {
    "objectID": "Python.html",
    "href": "Python.html",
    "title": "C’est quoi Python ?",
    "section": "",
    "text": "Python est un language de programmation puissant et polyvalent crée en 1989 par Guido Van Rossum, aux Pays-Bas. C’est en profitant d’une semaine de vacances durant les fêtes de Noël, qu’il utilise son ordinateur pour écrire la première version du language. Il décida d’appeler son language ainsi, reliant sa série favorite : Monty Python’s Flying Circus.\nCaractéristiques :\nCe language possède de nombreux avantages :\n\nIl est gratuit : possibilité d’être télécharger sur autant de postes que vous souhaitez, ainsi que votre téléphone ;\nIl est multiplateforme : fonctionne sur plusieurs systèmes d’exploitation (Windows, Mac OS X, Linux, Android, iOS, depuis les mini-ordinateurs Raspberry Pi jusqu’aux supercalculateurs.) ;\nIl est facile d’intégration à toute une sélection d’autres languages de programmation fréquemment utilisés, tels que Ruby, C, Java et PHP ;\nIl est orienté objet : permet de créer des entités virtuelles qui répresentent des objets du monde réel, comme une cellule, une protéine ou un atôme, avec leurs propres règles de fonctionnement et dintéractions ;\nIl bénéficie d’une large communauté active et variée. Pour t’aider dans tes challenges techniques, tu aura de multiples plateformes ou blog à ta disposition ;\nIl est relativement simple à prendre en main du fait que même les débutants en programmation peuvent l’utiliser.\n\nEnfin, Python est un language qui ne veillit pas. Les développeurs mettent à jour le language et développe de nouvelles fonctionnalités régulièrement. Tu peux te référer à la documentation officielle du site https://www.python.org .\nA contrario, la faiblesse de Python reste sa lenteur, comparé à Java ou C, Python demande plus de temps d’exécution.\nL’indentation\nDans Python, l’indentation est une importance capitale permettant de délimiter les blocs de code. Il est conventionnel d’utiliser quatre espaces pour l’indentation, plutôt que des tabulations."
  },
  {
    "objectID": "Exceptions.html",
    "href": "Exceptions.html",
    "title": "Gestion des exceptions",
    "section": "",
    "text": "Une exception est une erreur qui survient pendant l’exécution du programme, différente des erreurs de syntaxe détectées avant l’exécution. Les raisons des exceptions peuvent être variées, allant d’entrées invalides à des opérations mathématiques impossibles, en passant par des manipulations de fichiers incorrectes, et bien d’autres.\nVoici quelques exemples d’exceptions fréquemment rencontrées :\n\nIndexError : Se produit lorsqu’on tente d’accéder à un index qui n’existe pas dans une séquence (comme une liste ou un tuple).\nValueError : Apparaît lorsqu’une fonction reçoit un argument de type correct mais d’une valeur inappropriée.\nTypeError : Se produit lorsqu’une opération ou fonction est appliquée à un objet d’un type inapproprié.\nFileNotFoundError : Levée lorsqu’une tentative de lecture d’un fichier échoue parce que le fichier n’existe pas.\nZeroDivisionError : Se produit lorsqu’une division par zéro est tentée.\nNameError : Se produit lorsqu’une variable n’est pas définie dans le contexte actuel."
  },
  {
    "objectID": "Exceptions.html#définition",
    "href": "Exceptions.html#définition",
    "title": "Gestion des exceptions",
    "section": "",
    "text": "Une exception est une erreur qui survient pendant l’exécution du programme, différente des erreurs de syntaxe détectées avant l’exécution. Les raisons des exceptions peuvent être variées, allant d’entrées invalides à des opérations mathématiques impossibles, en passant par des manipulations de fichiers incorrectes, et bien d’autres.\nVoici quelques exemples d’exceptions fréquemment rencontrées :\n\nIndexError : Se produit lorsqu’on tente d’accéder à un index qui n’existe pas dans une séquence (comme une liste ou un tuple).\nValueError : Apparaît lorsqu’une fonction reçoit un argument de type correct mais d’une valeur inappropriée.\nTypeError : Se produit lorsqu’une opération ou fonction est appliquée à un objet d’un type inapproprié.\nFileNotFoundError : Levée lorsqu’une tentative de lecture d’un fichier échoue parce que le fichier n’existe pas.\nZeroDivisionError : Se produit lorsqu’une division par zéro est tentée.\nNameError : Se produit lorsqu’une variable n’est pas définie dans le contexte actuel."
  },
  {
    "objectID": "Exceptions.html#traitement-des-exceptions",
    "href": "Exceptions.html#traitement-des-exceptions",
    "title": "Gestion des exceptions",
    "section": "Traitement des exceptions",
    "text": "Traitement des exceptions\nLa gestion des exceptions est un aspect crucial de la programmation pour plusieurs raisons :\n\nRobustesse : Elle permet à un programme de gérer les erreurs de manière élégante sans interrompre abruptement son exécution.\nContrôle du Flux : Elle offre un moyen de guider le déroulement d’un programme lorsque des situations exceptionnelles surviennent.\nDébogage Facilité : Elle facilite l’identification des sources d’erreur et leur gestion efficace.\nSécurité : Elle permet de traiter les situations potentiellement risquées, telles que la lecture de fichiers corrompus ou la manipulation de données utilisateur incorrectes.\n\n\nTry-Except\nLa syntaxe de base pour la gestion des exceptions en Python repose sur les instructions try et except.\nIl est possible d’avoir plusieurs blocs except pour traiter divers types d’exceptions, offrant ainsi une réponse adaptée à chaque type d’erreur pouvant survenir.\nL’utilisation de multiples blocs except permet dd’apporter des réponses spécifiques à chaque catégorie d’erreur, ce qui améliore la clarté et la maintenance du code.\n\n\nFinally\nLe bloc finally en Python est destiné à définir des actions devant être exécutées après les blocs try et except, indépendamment de la survenue ou non d’une exception.\nCe bloc est souvent employé pour des tâches de nettoyage nécessaires dans tous les cas, comme la fermeture de fichiers ou la libération de ressources externes.\n\n\nElse\nUtilisez else est appropriée lorsque vous avez besoin d’exécuter du code uniquement si le bloc try s’est exécuté sans erreur, mais avant d’exécuter le code dans le bloc finally."
  },
  {
    "objectID": "Exceptions.html#assertions",
    "href": "Exceptions.html#assertions",
    "title": "Gestion des exceptions",
    "section": "Assertions",
    "text": "Assertions\nL’instruction assert permet de vérifier si une condition est vraie. En cas de fausseté de la condition, une AssertionError est déclenchée.\nLes assertions sont principalement utilisées pour le débogage afin de vérifier des conditions internes, tandis que les exceptions sont employées pour la gestion des erreurs et des situations exceptionnelles dans le flux normal du programme."
  },
  {
    "objectID": "Exceptions.html#raise",
    "href": "Exceptions.html#raise",
    "title": "Gestion des exceptions",
    "section": "Raise",
    "text": "Raise\nL’emploi de l’instruction raise en Python est essentiel pour la gestion des exceptions, permettant aux développeurs de provoquer explicitement des exceptions lorsqu’une condition spécifique survient dans le programme.\nLes exceptions déclenchées avec raise peuvent être capturées et traitées en amont, offrant ainsi aux développeurs la possibilité de réagir adéquatement aux différents types de problèmes qui peuvent survenir, ce qui améliore la robustesse et la fiabilité du code."
  },
  {
    "objectID": "Exceptions.html#en-résumé",
    "href": "Exceptions.html#en-résumé",
    "title": "Gestion des exceptions",
    "section": "En résumé",
    "text": "En résumé\nVoici quelques-unes des exceptions intégrées courantes en programmation Python ainsi que les erreurs qui les provoquent.\n\n\n\n\n\n\n\n\nException\nCause de l’erreur\n\n\n\n\n\nAsseretionError\nLevée lorsque l’instruction assert échoue\n\n\n\nAttributeError\nLevée lorsque l’assignation ou la référence à un attribut échoue\n\n\n\nEOFError\nLevée lorsque input() atteint la fin du fichier\n\n\n\nFloatingPointError\nLevée lorsqu’une opération sur les nombres à virgule flottante échoue\n\n\n\nGeneratorExit\nLevée lorsque la méthode close() d’un générateur est appelée\n\n\n\nImportError\nLevée lorsque le module importé n’est pas trouvé\n\n\n\nIndexError\nLevée lorsque l’index d’une séquence est hors de portée\n\n\n\nKeyError\nLevée lorsque une clé n’est pas trouvée dans un dictionnaire\n\n\n\nKeyboardInterrupt\nLevée lorsque l’utilisateur appuie sur la touche d’interruption (Ctrl+C ou Suppr)\n\n\n\nMemoryError\nLevée lorsqu’une opération manque de mémoire\n\n\n\nNameError\nLevée lorsqu’une variable n’est pas trouvée dans la portée locale ou globale\n\n\n\nNotImplementedError\nevée par des méthodes abstraites\n\n\n\nOSError\nLevée lorsqu’une opération système provoque une erreur liée au système\n\n\n\nOverflowError\nLevée lorsque le résultat d’une opération arithmétique est trop grand pour être représenté\n\n\n\nReferenceError\nLevée lorsqu’une référence faible est utilisée pour accéder à un référent collecté par le ramasse-miette\n\n\n\nRuntimeError\nLevée lorsqu’une erreur ne rentre dans aucune autre catégorie\n\n\n\nStopIteration\nLevée par next() pour indiquer qu’il n’y a plus d’élément à renvoyer par l’itérateur\n\n\n\nSyntaxError\nLevée par l’analyseur lorsque une erreur de syntaxe est rencontrée\n\n\n\nIndentationError\nLevée lorsqu’il y a une indentation incorrecte\n\n\n\nTabError\nLevée lorsque l’indentation est composée de tabulations et d’espaces inconsistants\n\n\n\nSystemError\nLevée lorsque l’interpréteur détecte une erreur interne\n\n\n\nSystemExit\nLevée par la fonction sys.exit()\n\n\n\nTypeError\nLevée lorsqu’une fonction ou une opération est appliquée à un objet de type incorrect\n\n\n\nUnboundLocalError\nLevée lorsqu’une référence est faite à une variable locale dans une fonction ou une méthode, mais aucune valeur n’a été liée à cette variable\n\n\n\nUnicodeDecodeError\nLevée lorsqu’une erreur liée à Unicode se produit pendant le décodage\n\n\n\nValueError\nLevée lorsqu’une fonction reçoit un argument de type correct mais de valeur incorrecte\n\n\n\nZeroDivisionError\nLevée lorsque le deuxième opérande de l’opération de division ou de modulo est zéro"
  },
  {
    "objectID": "Exercices.html#les-méthodes-des-listes",
    "href": "Exercices.html#les-méthodes-des-listes",
    "title": "",
    "section": "LEs méthodes des listes",
    "text": "LEs méthodes des listes\nFaire des exercices sur les listes : |Méthode | Description | Exemple | |———|———-|———-| |append() | Ajoute un élément à la fin de la liste | list.append(8) | |extend() | Étend la liste en ajoutant tous les éléments d’une autre liste | list.extend([9, 12]) | |insert() | Insère un élément à une position donnée| liste.insert(4, d) | |remove() |Supprime la première occurrence d’un élément | liste.remove('d')| |pop() | Supprime et renvoie un élément à une position donnée (par défaut ,le dernier) | liste.pop()| |clear() | Supprime tous les éléments de la liste | liste.clear() | |index() | Retourne l’indice du premier élément correspondant | liste.index('d')| |count() | Compte le nombre d’occurences d’une élément spécifique | liste.count(8) | |sort() | Trie les élément de la liste (dans un ordre spécifique) | liste.sort()| |reverse() | Inverse l’ordre des éléments de la liste | liste.reverse() |\n\n# Création d'une liste de base\nma_liste = [1, 2, 3]\nprint(ma_liste)\n\n[1, 2, 3]\n\n\n\n# Utilisation de append()\nma_liste.append(\"quatre\")\nprint(\"Après append(quatre):\", ma_liste)\n# Utilisation de extend()\nma_liste.extend([5, 6])\nprint(\"Après extend([5, 6]):\", ma_liste)\n# Utilisation de insert()\nma_liste.insert(1, 'elephant')\nprint(\"Après insert(1, 'elephant'):\", ma_liste)\n# Utilisation de remove()\nma_liste.remove('elephant')\nprint(\"Après remove('elephant'):\", ma_liste)\n# Utilisation de pop()\nelement_supprime = ma_liste.pop()\nprint(\"Après pop():\", ma_liste, \", Élément supprimé:\", element_supprime)\n# Utilisation de clear()\nma_liste.clear()\nprint(\"Après clear():\", ma_liste)\n\nAprès append(quatre): [1, 2, 3, 'quatre']\nAprès extend([5, 6]): [1, 2, 3, 'quatre', 5, 6]\nAprès insert(1, 'elephant'): [1, 'elephant', 2, 3, 'quatre', 5, 6]\nAprès remove('elephant'): [1, 2, 3, 'quatre', 5, 6]\nAprès pop(): [1, 2, 3, 'quatre', 5] , Élément supprimé: 6\nAprès clear(): []\n\n\n\n# Recréation de la liste pour les autres méthodes\nma_liste = [3, 1, 4, 2, 2]\n\n\n# Utilisation de index()\nindex_de_4 = ma_liste.index(4)\nprint(\"Index de 4:\", index_de_4)\n\n# Utilisation de count()\ncompte_de_2 = ma_liste.count(2)\nprint(\"Nombre d'occurrences de 2:\", compte_de_2)\n\n# Utilisation de sort()\nma_liste.sort()\nprint(\"Après sort():\", ma_liste)\n\n# Utilisation de reverse()\nma_liste.reverse()\nprint(\"Après reverse():\", ma_liste)\n\nIndex de 4: 2\nNombre d'occurrences de 2: 2\nAprès sort(): [1, 2, 2, 3, 4]\nAprès reverse(): [4, 3, 2, 2, 1]\n\n\n\nParcours de Liste Le parcours de liste consiste à accéder séquentiellement à chaque élément d’une liste. Cela peut être fait de différentes manières, mais les plus courantes sont les boucles for et while.\n\nBoucle for : La boucle for est la méthode la plus couramment utilisée pour parcourir une liste. Elle permet de traiter chaque élément individuellement.\nList Comprehension : La compréhension de liste est une méthode concise pour créer des listes. Elle permet de transformer une liste en une autre liste, en filtrant les éléments pour former une liste des résultats d’une expression donnée.\n\n\nLa syntaxe de base d’une compréhension de liste est :\n[nouvelle_expression for item in iterable if condition]\n\nnouvelle_expression est l’expression qui définit comment mapper les éléments de l’iterable (par exemple, une liste).\nitem est la variable qui prend la valeur de chaque élément de l’iterable pendant chaque itération.\ncondition est une condition optionnelle pour filtrer les éléments de l’iterable.\n\n\n# récupérer tous les fruits avec un \"a\"\nfruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = []\n\nfor f in fruits:\n    if \"a\" in f:\n        newlist.append(f)\n\nprint(newlist)\n\n['apple', 'banana', 'mango']\n\n\n\nnewlist = [f for f in fruits if \"a\" in f ]\nprint(newlist)\n\n['apple', 'banana', 'mango']\n\n\n\nnombre = [1, 10, 100]\nnombre_carres = [x**2 for x in nombre]\nnombre_carres\n\n[1, 100, 10000]\n\n\n\n# Créer une liste des carrés des nombres de 0 à 9 :\ncarres = [x**2 for x in range(10)]\n\n\n# Filtrer les nombres pairs dans une liste :\nnombres_pairs = [x for x in range(10) if x % 2 == 0]\n\n\n# Appliquer une fonction à tous les éléments :\nnoms_majuscules = [nom.upper() for nom in [\"alice\", \"bob\", \"charlie\"]]\nnoms_majuscules\n\n['ALICE', 'BOB', 'CHARLIE']"
  },
  {
    "objectID": "Exercices.html#parcours-de-listes",
    "href": "Exercices.html#parcours-de-listes",
    "title": "",
    "section": "Parcours de listes",
    "text": "Parcours de listes\n\n# récupérer tous les fruits avec un \"a\"\nfruits = [\"poire\", \"fraise\", \"kiwi\", \"pitaya\", \"mangue\"]\nnewlist = []\n\nfor f in fruits:\n    if \"a\" in f:\n        newlist.append(f)\n\nprint(newlist)\n\n['fraise', 'pitaya', 'mangue']\n\n\n\nnewlist = [f for f in fruits if \"a\" in f ]\nprint(newlist)\n\n['fraise', 'pitaya', 'mangue']\n\n\n\n# Créer une liste des carrés des nombres de 0 à 9 :\ncarres = [x**2 for x in range(20)]\n\n\n# Filtrer les nombres pairs dans une liste :\nnombres_pairs = [x for x in range(20) if x % 2 == 0]\n\n\n# Appliquer une fonction à tous les éléments :\nnoms_majuscules = [nom.upper() for nom in [\"alice\", \"bob\", \"charlie\"]]\nnoms_majuscules\n\n['ALICE', 'BOB', 'CHARLIE']"
  },
  {
    "objectID": "Exercices.html#appel-dune-fonction-avec-arguments",
    "href": "Exercices.html#appel-dune-fonction-avec-arguments",
    "title": "",
    "section": "Appel d’une fonction avec arguments",
    "text": "Appel d’une fonction avec arguments\nExemples :\n\ndef saluer(nom):\n    print(f\"Bonjour, {nom}!\")\n\n\nsaluer(nom = \"Jordan\")\nsaluer(nom = \"Lola\")\nsaluer(nom = \"Mélany\")\nsaluer(nom = \"Kevin\")\n\nBonjour, Jordan!\nBonjour, Lola!\nBonjour, Mélany!\nBonjour, Kevin!\n\n\n\ndef affiche_message(message):\n    print(f\"Message reçu : {message}\")\n\naffiche_message(\"Hey, what's up\")\naffiche_message(\"La Programmation c'est cool!\")\n\nMessage reçu : Hey, what's up\nMessage reçu : La Programmation c'est cool!\n\n\n\ndef additionner(a, b):\n    somme = a + b\n    print(f\"La somme de {a} et {b} est {somme}\")\n\n\nadditionner(a = 5, b = 3)\nadditionner(5, 3)\n\nLa somme de 5 et 3 est 8\nLa somme de 5 et 3 est 8\n\n\n\nadditionner(b = 10, a = 67)\n\nLa somme de 67 et 10 est 77\n\n\n\ndef division(a, b):\n    quotient = a / b\n    print(f\"Le quotient de {a} et {b} est {quotient}\")\n\n\ndivision(a = 5, b = 3)\ndivision(b = 3, a = 5)\n\ndivision(3, 5)\ndivision(5, 3)\n\nLe quotient de 5 et 3 est 1.6666666666666667\nLe quotient de 5 et 3 est 1.6666666666666667\nLe quotient de 3 et 5 est 0.6\nLe quotient de 5 et 3 est 1.6666666666666667\n\n\n\ndef puissance(base, exposant):\n    resultat = base ** exposant\n    print(f\"{base} élevé à la puissance {exposant} est égal {resultat}\")\n    \npuissance(exposant = 2, base =  3)\n\n3 élevé à la puissance 2 est égal 9"
  }
]