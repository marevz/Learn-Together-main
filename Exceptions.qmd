---
title: "Gestion des exceptions"
---

## Définition

**Une exception est une erreur** qui survient pendant l'exécution du programme, différente des erreurs de syntaxe détectées avant l'exécution. Les raisons des exceptions peuvent être variées, allant d'entrées invalides à des opérations mathématiques impossibles, en passant par des manipulations de fichiers incorrectes, et bien d'autres.

Voici quelques **exemples d'exceptions** fréquemment rencontrées :

* ```IndexError``` : Se produit lorsqu'on tente d'accéder à un index qui n'existe pas dans une séquence (comme une liste ou un tuple).

* ```ValueError``` : Apparaît lorsqu'une fonction reçoit un argument de type correct mais d'une valeur inappropriée.

* ```TypeError``` : Se produit lorsqu'une opération ou fonction est appliquée à un objet d'un type inapproprié.

* ```FileNotFoundError``` : Levée lorsqu'une tentative de lecture d'un fichier échoue parce que le fichier n'existe pas.

* ```ZeroDivisionError``` : Se produit lorsqu'une division par zéro est tentée.

* ```NameError``` : Se produit lorsqu'une variable n'est pas définie dans le contexte actuel.


## Traitement des exceptions

**La gestion des exceptions** est un aspect crucial de la programmation pour plusieurs raisons :

* **Robustesse** : Elle permet à un programme de gérer les erreurs de manière élégante sans interrompre abruptement son exécution.
* **Contrôle du Flux** : Elle offre un moyen de guider le déroulement d'un programme lorsque des situations exceptionnelles surviennent.
* **Débogage Facilité** : Elle facilite l'identification des sources d'erreur et leur gestion efficace.
* **Sécurité** : Elle permet de traiter les situations potentiellement risquées, telles que la lecture de fichiers corrompus ou la manipulation de données utilisateur incorrectes.

### Try-Except

La syntaxe de base pour la gestion des exceptions en Python repose sur les instructions ```try``` et ```except```.

Il est possible d'avoir plusieurs blocs ```except``` pour traiter divers types d'exceptions, offrant ainsi une réponse adaptée à chaque type d'erreur pouvant survenir.

L'utilisation de multiples blocs ```except``` permet dd'apporter des réponses spécifiques à chaque catégorie d'erreur, ce qui améliore la clarté et la maintenance du code.

### Finally

Le bloc ```finally``` en Python est destiné à définir des actions devant être exécutées après les blocs ```try``` et ```except```, indépendamment de la survenue ou non d'une exception.

Ce bloc est souvent employé pour des tâches de nettoyage nécessaires dans tous les cas, comme la fermeture de fichiers ou la libération de ressources externes.


### Else

Utilisez ```else``` est appropriée lorsque vous avez besoin d'exécuter du code uniquement si le bloc ```try``` s'est exécuté sans erreur, mais avant d'exécuter le code dans le bloc ```finally```.


## Assertions
L'instruction ```assert``` permet de vérifier si une condition est vraie. En cas de fausseté de la condition, une ```AssertionError``` est déclenchée.

Les assertions sont principalement utilisées pour le débogage afin de vérifier des conditions internes, tandis que les exceptions sont employées pour la gestion des erreurs et des situations exceptionnelles dans le flux normal du programme.


## Raise

L'emploi de l'instruction ```raise``` en Python est essentiel pour la gestion des exceptions, permettant aux développeurs de provoquer explicitement des exceptions lorsqu'une condition spécifique survient dans le programme.

Les exceptions déclenchées avec ```raise``` peuvent être capturées et traitées en amont, offrant ainsi aux développeurs la possibilité de réagir adéquatement aux différents types de problèmes qui peuvent survenir, ce qui améliore la robustesse et la fiabilité du code.


## **En résumé**

Voici quelques-unes des exceptions intégrées courantes en programmation Python ainsi que les erreurs qui les provoquent.

|Exception | Cause de l'erreur |
|---------|----------|----------|
| AsseretionError| Levée lorsque l'instruction assert échoue | 
| AttributeError | Levée lorsque l'assignation ou la référence à un attribut échoue |
| EOFError | Levée lorsque input() atteint la fin du fichier |
| FloatingPointError | Levée lorsqu'une opération sur les nombres à virgule flottante échoue |
| GeneratorExit | Levée lorsque la méthode close() d'un générateur est appelée |
| ImportError | Levée lorsque le module importé n'est pas trouvé |
| IndexError | Levée lorsque l'index d'une séquence est hors de portée |
| KeyError | Levée lorsque une clé n'est pas trouvée dans un dictionnaire |
| KeyboardInterrupt | Levée lorsque l'utilisateur appuie sur la touche d'interruption (Ctrl+C ou Suppr) |
| MemoryError | Levée lorsqu'une opération manque de mémoire |
| NameError | Levée lorsqu'une variable n'est pas trouvée dans la portée locale ou globale |
| NotImplementedError | evée par des méthodes abstraites |
| OSError | Levée lorsqu'une opération système provoque une erreur liée au système |
| OverflowError | Levée lorsque le résultat d'une opération arithmétique est trop grand pour être représenté |
| ReferenceError | Levée lorsqu'une référence faible est utilisée pour accéder à un référent collecté par le ramasse-miette |
| RuntimeError | Levée lorsqu'une erreur ne rentre dans aucune autre catégorie |
| StopIteration | Levée par next() pour indiquer qu'il n'y a plus d'élément à renvoyer par l'itérateur |
| SyntaxError | Levée par l'analyseur lorsque une erreur de syntaxe est rencontrée |
| IndentationError | Levée lorsqu'il y a une indentation incorrecte |
| TabError | Levée lorsque l'indentation est composée de tabulations et d'espaces inconsistants |
| SystemError | Levée lorsque l'interpréteur détecte une erreur interne |
| SystemExit | Levée par la fonction sys.exit() |
| TypeError | Levée lorsqu'une fonction ou une opération est appliquée à un objet de type incorrect |
| UnboundLocalError | Levée lorsqu'une référence est faite à une variable locale dans une fonction ou une méthode, mais aucune valeur n'a été liée à cette variable |
| UnicodeDecodeError | Levée lorsqu'une erreur liée à Unicode se produit pendant le décodage |
| ValueError | Levée lorsqu'une fonction reçoit un argument de type correct mais de valeur incorrecte |
| ZeroDivisionError | Levée lorsque le deuxième opérande de l'opération de division ou de modulo est zéro |

